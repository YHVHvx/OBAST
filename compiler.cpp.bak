#include "clang/Driver/Options.h"
#include "clang/AST/AST.h"
#include "clang/AST/ASTContext.h"
#include "clang/AST/ASTConsumer.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/Frontend/ASTConsumers.h"
#include "clang/Frontend/FrontendActions.h"
#include "clang/Frontend/CompilerInstance.h"
#include "clang/Tooling/CommonOptionsParser.h"
#include "clang/Tooling/Tooling.h"
#include "clang/Rewrite/Core/Rewriter.h"
#include "clang/ASTMatchers/ASTMatchers.h"
#include "clang/ASTMatchers/ASTMatchFinder.h"
#include "clang/Tooling/Refactoring.h"
#include <fstream>
#include <sstream>

using namespace std;
using namespace clang;
using namespace clang::driver;
using namespace clang::tooling;
using namespace llvm;
using namespace clang::ast_matchers;
using namespace clang::ast_matchers::internal;

Rewriter rewriter;
/*
void RewriteNVO(FunctionDecl* f){

    Stmt* funcBody = f->getBody();

    SourceRange range = funcBody -> getSourceRange();
    Rewriter::RewriteOptions* rOpt = new Rewriter::RewriteOptions();
    rOpt->RemoveLineIfEmpty = true;
    rewriter.RemoveText(range,*rOpt);

    stringstream ss;
    ss << "\n Rewrite the NVO function \n";
    SourceLocation srcLoc = f -> getSourceRange().getBegin();
    rewriter.InsertText(srcLoc,ss.str(),true,true);
}

class ExampleVisitor : public RecursiveASTVisitor<ExampleVisitor> {
private:
    ASTContext *astContext; // used for getting additional AST info

public:
    explicit ExampleVisitor(CompilerInstance *CI) 
      : astContext(&(CI->getASTContext())) // initialize private members
    {
        rewriter.setSourceMgr(astContext->getSourceManager(), astContext->getLangOpts());
    }

    //bool VisitDecl(Decl *D)
    bool VisitFunctionDecl(FunctionDecl *f) {
	DeclarationName declName = f->getNameInfo().getName();
	string funcName = declName.getAsString();
	if(funcName == "NVO_MODULE"){
            RewriteNVO(f);
	}
        return true;
    }

};



class ExampleASTConsumer : public ASTConsumer {
private:
    ExampleVisitor *visitor; // doesn't have to be private

public:
    // override the constructor in order to pass CI
    explicit ExampleASTConsumer(CompilerInstance *CI)
        : visitor(new ExampleVisitor(CI)) // initialize the visitor
    { }

    // override this to call our ExampleVisitor on the entire source file
    virtual void HandleTranslationUnit(ASTContext &Context) {
        visitor->TraverseDecl(Context.getTranslationUnitDecl());
    }
};



class ExampleFrontendAction : public ASTFrontendAction {
public:
    virtual std::unique_ptr<clang::ASTConsumer> CreateASTConsumer(CompilerInstance &CI, StringRef file) {
        return std::unique_ptr<clang::ASTConsumer>(new ExampleASTConsumer(&CI)); // pass CI pointer to ASTConsumer
    }
};

*/
static llvm::cl::OptionCategory MyToolCategory("my-tool options");

DeclarationMatcher NVOFuncMatcher = functionDecl(hasName("NVO_MODULE")).bind("nvo");

class NVOCallback : public MatchFinder::MatchCallback {
private:
  Replacements* replace;
public :
  virtual void run(const MatchFinder::MatchResult &Result) {
    const FunctionDecl* f = Result.Nodes.getDeclAs<clang::FunctionDecl>("nvo");
    Replacement rep(*(Result.SourceManager), f->getLocStart(), 0, "// the 'NVO' part\n");
    replace->insert(rep);

    //RewriteNVO(f);
  }
};

int main(int argc, const char **argv) {

    // parse the command-line args passed to your code
    CommonOptionsParser op(argc, argv, MyToolCategory); 
    // create a new Clang Tool instance (a LibTooling environment)
    ClangTool Tool(op.getCompilations(), op.getSourcePathList());
    // run the Clang Tool, creating a new FrontendAction (explained below)
    
    NVOCallback nvoCallback;
    MatchFinder finder;
    finder.addMatcher(NVOFuncMatcher, &nvoCallback);
     
    int result = Tool.run(newFrontendActionFactory(&finder).get());

    //Use 
    //StringRef outFileName = "./sha1tmp.c";
    //std::error_code errorInfo;
    //llvm::raw_fd_ostream outFile(outFileName,errorInfo,llvm::sys::fs::OpenFlags::F_RW);
    //int result = Tool.run(newFrontendActionFactory<ExampleFrontendAction>().get());
    // print out the rewritten source code ("rewriter" is a global var.)
    //rewriter.getEditBuffer(rewriter.getSourceMgr().getMainFileID()).write(outFile);
    //outFile.flush();

    return result;
}

